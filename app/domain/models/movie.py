from datetime import datetime
from typing import Optional


from sqlmodel import Field, SQLModel

'''
Models can be DTOs and/or data models. Those with table=True are SqlAlchemy data models that represent a database table.
Those without table=True are just plain Pydantic models that can be used as DTOs.
In a more complex app, domain models could be mapped from these models. In this app, we don't have much business logic, so we don't need separate domain models.
'''

class MovieBase(SQLModel):
    '''
    The base model for a movie.
    
    Defines fields shared by all Movie models.
    '''
    title: str = Field(max_length=255)
    description: str
    movieYear: int = Field(gt=1887,lt=3000)

class Movie(MovieBase, table=True):
    '''
    The data model for a movie.
    
    The movieId and dateCreated fields are marked optional because it will be generated by the database at insert time.
    In code they could be None but will eventually have a value.
    '''
    movieId: Optional[int] = Field(default=None, primary_key=True) 
    dateCreated: Optional[datetime] = Field(default_factory=datetime.utcnow, nullable=False)

class MovieCreate(MovieBase):
    '''
    The model used to create a movie.
    
    Currently, uses the same required fields as the MovieBase. Note it doesn't include movieId or dateCreated because
    we don't know those at creaton time, only after saving to the database.
    '''
    pass;

class MovieRead(MovieBase):
    '''
    A complete movie class used for reads.
    
    Includes the movieId and dateCreated, as when reading from the database we will always have these fields.
    '''
    movieId: int
    dateCreated: datetime

class MovieUpdate(SQLModel):
    '''
    Used to update a Movie. All fields are optional, so can't inherit from MovieBase.
    '''
    title: Optional[str] = None
    description: Optional[str] = None
    movieYear: Optional[int] = None

class MovieReplace(MovieCreate):
    pass;